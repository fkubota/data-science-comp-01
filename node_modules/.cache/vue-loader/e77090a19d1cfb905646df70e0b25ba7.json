{"remainingRequest":"/home/fkubota/Git/data-science-comp-01/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/fkubota/Git/data-science-comp-01/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/home/fkubota/Git/data-science-comp-01/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/fkubota/Git/data-science-comp-01/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fkubota/Git/data-science-comp-01/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/fkubota/Git/data-science-comp-01/src/App.vue","mtime":1586691940782},{"path":"/home/fkubota/Git/data-science-comp-01/node_modules/cache-loader/dist/cjs.js","mtime":1586602393340},{"path":"/home/fkubota/Git/data-science-comp-01/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1586602393268},{"path":"/home/fkubota/Git/data-science-comp-01/node_modules/vuetify-loader/lib/loader.js","mtime":1586602393040},{"path":"/home/fkubota/Git/data-science-comp-01/node_modules/cache-loader/dist/cjs.js","mtime":1586602393340},{"path":"/home/fkubota/Git/data-science-comp-01/node_modules/vue-loader/lib/index.js","mtime":1586602393268}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}